(dp1
S'output'
p2
S"<type 'exceptions.ValueError'> invalid literal for long() with base 10: '12/'"
p3
sS'layer'
p4
S'/home/saurabh/web2py/applications/NewsPortal/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n## - call exposes all registered services (none by default)\n#########################################################################\n\n@auth.requires_login()\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n\n    if you need a simple wiki simple replace the two lines below with:\n    return auth.wiki()\n    """\n    #response.flash = T("Welcome to web2py!")\n    if(auth.user.designation==\'A\'):\n            redirect(\'admin_page\')\n    else:\n            redirect(\'user_page\')\n #   return dict(message=T(\'Hello World\'))\n    return locals()\n\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/manage_users (requires membership in \n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n@auth.requires_signature()\ndef data():\n    """\n    http://..../[app]/default/data/tables\n    http://..../[app]/default/data/create/[table]\n    http://..../[app]/default/data/read/[table]/[id]\n    http://..../[app]/default/data/update/[table]/[id]\n    http://..../[app]/default/data/delete/[table]/[id]\n    http://..../[app]/default/data/select/[table]\n    http://..../[app]/default/data/search/[table]\n    but URLs must be signed, i.e. linked with\n      A(\'table\',_href=URL(\'data/tables\',user_signature=True))\n    or with the signed load operator\n      LOAD(\'default\',\'data.load\',args=\'tables\',ajax=True,user_signature=True)\n    """\n    return dict(form=crud())\n    \ndef admin_page():\n        return locals()\ndef user_page():\n        return locals()\ndef post_news():\n        form=SQLFORM(db.news)\n        form.vars.postedby=auth.user.first_name+" "+auth.user.last_name\n        if form.accepts(request,session):\n                session.flash=T("Successfully inserted news")\n                redirect(\'index\')\n                return locals()   \n        else:\n                session.flash=T("Fill the form correctly")\n        return dict(form=form)\ndef add_category():\n        form = SQLFORM(db.category)\n        if form.process().accepted:\n                print "sdcsdcdscds"\n                session.flash=\'Successfully added new category\'\n                redirect(URL(\'index\'))\n                #return locals()\n        elif form.errors:\n                print "booba"\n               # session.flash=T(\'Fill the form correctly\')\n        return dict(form=form)\ndef view_news():\n        x=db(db.category.id>0).select(db.category.ALL)\n        return dict(x=x)\ndef display():\n        category_id=request.vars.cate\n        x=db(db.news.category==category_id).select(db.news.ALL,orderby=~(db.news.rating))\n        return dict(x=x)\ndef likes():\n        news_id=request.vars.nid\n        print news_id\n        news_id=news_id[:-1]\n        print news_id\n        x=db((db.nlikes.news_id==news_id)&(auth.user.id==db.nlikes.user_id)).select(db.nlikes.like_number)\n        num=db(db.news.id==news_id).select(db.news.likes,db.news.dislikes)\n        print "num"\n        print news_id\n        print "adxasxdasd"\n        if(x):\n                if(x[0][\'like_number\']==5):\n                        db(db.news.id==news_id).update(likes=num[0][\'likes\']-1)\n                        db((db.nlikes.news_id==news_id)&(auth.user.id==db.nlikes.user_id)).update(like_number=0)\n                elif(x[0][\'like_number\']==-3):\n                        db(db.news.id==news_id).update(likes=num[0][\'likes\']+1)                            \n                        db(db.news.id==news_id).update(dislikes=num[0][\'dislikes\']-1)\n                        db((db.nlikes.news_id==news_id)&(auth.user.id==db.nlikes.user_id)).update(like_number=5)\n                else:\n                        db(db.news.id==news_id).update(likes=num[0][\'likes\']+1)\n                        db((db.nlikes.news_id==news_id)&(auth.user.id==db.nlikes.user_id)).update(like_number=5)\n        else:\n                print "nlikes"\n                db(db.news.id==news_id).update(likes=num[0][\'likes\']+1)\n                db.nlikes.insert(news_id=news_id,user_id=auth.user.id,like_number=5)\n        y=db(news_id==db.nlikes.news_id).select(db.nlikes.like_number)\n        r=0\n        category=db(news_id==db.news.id).select(db.news.category)\n        category=category[0][\'category\']\n        st=""\n        st=st+"display?cate="+str(category)\n        print category\n        for i in range(len(y)):\n                r+=y[i][\'like_number\']\n        db(news_id==db.news.id).update(rating=100+r)\n        redirect(st)\n        return locals()\n        \n        \n        \ndef dislikes():\n        news_id=request.vars.nid\n        print "nid"\n        print news_id\n        print type(news_id)\n        news_id=news_id[:-1]\n        x=db((db.nlikes.news_id==news_id)&(auth.user.id==db.nlikes.user_id)).select(db.nlikes.like_number)\n        num=db(db.news.id==news_id).select(db.news.likes,db.news.dislikes)\n        if(x):\n                if(x[0][\'like_number\']==5):\n                        db(db.news.id==news_id).update(likes=num[0][\'likes\']-1)\n                        db(db.news.id==news_id).update(dislikes=num[0][\'dislikes\']+1)\n                        db((db.nlikes.news_id==news_id)&(auth.user.id==db.nlikes.user_id)).update(like_number=-3)\n                        print "1"\n                elif(x[0][\'like_number\']==-3):                          \n                        db(db.news.id==news_id).update(dislikes=num[0][\'dislikes\']-1)\n                        db((db.nlikes.news_id==news_id)&(auth.user.id==db.nlikes.user_id)).update(like_number=0)\n                        print "2"\n                else:\n                        db(db.news.id==news_id).update(dislikes=num[0][\'dislikes\']+1)\n                        db((db.nlikes.news_id==news_id)&(auth.user.id==db.nlikes.user_id)).update(like_number=-3)\n                        print "3"\n        else:\n                print "nlikes"\n                print "4"\n                db(db.news.id==news_id).update(dislikes=num[0][\'dislikes\']+1)\n                db.nlikes.insert(news_id=news_id,user_id=auth.user.id,like_number=-3)\n        y=db(db.nlikes.news_id==news_id).select(db.nlikes.like_number)\n        r=0\n        category=db(news_id==db.news.id).select(db.news.category)\n        category=category[0][\'category\']\n        st=""\n        st=st+"display?cate="+str(category)\n        print category\n        for i in range(len(y)):\n                r+=y[i][\'like_number\']\n        db(news_id==db.news.id).update(rating=100+r)\n        redirect(st)\n        return locals()\ndef add_comment():\n        commentdata=request.post_vars[\'com\']\n        news_id=request.post_vars[\'news_id\']\n        print "my luck"\n        print news_id\n        #news_id=str(news_id)    \n        news_id=news_id[:-1]\n        db.comments.insert(commentdata=commentdata,user_id=auth.user.id,news_id=news_id)\n        category=db(news_id==db.news.id).select(db.news.category)\n        category=category[0][\'category\']\n        st=""\n        st=st+"display?cate="+str(category)\n        redirect(URL(\'default\',st))\n\ndef see_comments():\n        news_id=request.post_vars[\'news_id\']\n        x=db(db.comments.news_id==news_id).select(db.comments.commentdata)\n        return dict(x=x)\n\nresponse._vars=response._caller(see_comments)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/saurabh/web2py/gluon/restricted.py", line 212, in restricted\n    exec ccode in environment\n  File "/home/saurabh/web2py/applications/NewsPortal/controllers/default.py", line 213, in <module>\n  File "/home/saurabh/web2py/gluon/globals.py", line 194, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/saurabh/web2py/applications/NewsPortal/controllers/default.py", line 210, in see_comments\n    x=db(db.comments.news_id==news_id).select(db.comments.commentdata)\n  File "/home/saurabh/web2py/gluon/dal.py", line 9958, in select\n    return adapter.select(self.query,fields,attributes)\n  File "/home/saurabh/web2py/gluon/dal.py", line 2245, in select\n    return super(SQLiteAdapter, self).select(query, fields, attributes)\n  File "/home/saurabh/web2py/gluon/dal.py", line 1691, in select\n    sql = self._select(query, fields, attributes)\n  File "/home/saurabh/web2py/gluon/dal.py", line 1601, in _select\n    sql_w = \' WHERE \' + self.expand(query) if query else \'\'\n  File "/home/saurabh/web2py/gluon/dal.py", line 1366, in expand\n    return op(first, second, **optional_args)\n  File "/home/saurabh/web2py/gluon/dal.py", line 1276, in EQ\n    self.expand(second, first.type))\n  File "/home/saurabh/web2py/gluon/dal.py", line 1376, in expand\n    return str(self.represent(expression,field_type))\n  File "/home/saurabh/web2py/gluon/dal.py", line 1822, in represent\n    return str(long(obj))\nValueError: invalid literal for long() with base 10: \'12/\'\n'
p11
s.